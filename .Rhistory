link <- "https://xaptmladf.blob.core.windows.net/amldata/equipment-location-history-adf.tsv?st=2017-05-03T09%3A14%3A00Z&se=2027-05-04T09%3A14%3A00Z&sp=rl&sv=2015-12-11&sr=b&sig=XSPN5fVhD7Hd%2BmUgSB95ZMUSAW6G9pA9txAaXB0uBFQ%3D"
} else if(data == "event-history"){
link <- "https://xaptmladf.blob.core.windows.net/amldata/event-history-adf.tsv?st=2017-05-18T07%3A13%3A00Z&se=2027-05-19T07%3A13%3A00Z&sp=rl&sv=2015-12-11&sr=b&sig=EyPiginXMr8kPPXC4sJ49FfxKBZwKreGUSCGB%2B0o1vQ%3D"
} else if(data == "oil-sample-history"){
link <- "https://xaptmladf.blob.core.windows.net/amldata/oil-sample-history-adf.tsv?st=2017-05-03T09%3A14%3A00Z&se=2027-05-04T09%3A14%3A00Z&sp=rl&sv=2015-12-11&sr=b&sig=P8hipBGjV7eFRJDT4L8jHLT6EHLzd6LFWYwLC7egxMs%3D"
} else if(data == "engine-start-stop-history"){
link <- "https://xaptmladf.blob.core.windows.net/amldata/engine-start-stop-history-adf.tsv?st=2017-05-03T09%3A14%3A00Z&se=2027-05-04T09%3A14%3A00Z&sp=rl&sv=2015-12-11&sr=b&sig=GyEkutN0QNjZf2FNT0C4dprl687%2FzKQMfeCYXo60xiA%3D"
}
dataset <- read.delim(url(link), header = TRUE, sep = '\t', stringsAsFactors = FALSE, quote = "")
time2 <- Sys.time()
cat("Reading", data,  "finished with:", "\n")
print(time2 - time1)
cat("\n")
return(dataset)
}
### ----
sh <- read.historical("history")
read.historical <- function(data){
time1 <- Sys.time()
historical.datasets <- c("service-history", "equipment-location-history", "event-history",
"oil-sample-history", "engine-start-stop-history")
if(data %in% historical.datasets == FALSE){
stop("'data' must be one of the following: ","\n", paste0("\"",historical.datasets,"\" "))
} else {
cat("Reading historical dataset from Blob Storage started...", "\n")
cat("Shared access signatures are valid until 05/04/2027.", "\n", "\n")
}
if(data == "service-history"){
link <- "https://xaptmladf.blob.core.windows.net/amldata/service-history-adf.tsv?st=2017-05-03T09%3A14%3A00Z&se=2027-05-04T09%3A14%3A00Z&sp=rl&sv=2015-12-11&sr=b&sig=guU0nRqCK0KAdd5HE5cs4Qi1ai%2BUJezL8h7rpsXY3Oo%3D"
} else if(data == "equipment-location-history"){
link <- "https://xaptmladf.blob.core.windows.net/amldata/equipment-location-history-adf.tsv?st=2017-05-03T09%3A14%3A00Z&se=2027-05-04T09%3A14%3A00Z&sp=rl&sv=2015-12-11&sr=b&sig=XSPN5fVhD7Hd%2BmUgSB95ZMUSAW6G9pA9txAaXB0uBFQ%3D"
} else if(data == "event-history"){
link <- "https://xaptmladf.blob.core.windows.net/amldata/event-history-adf.tsv?st=2017-05-18T07%3A13%3A00Z&se=2027-05-19T07%3A13%3A00Z&sp=rl&sv=2015-12-11&sr=b&sig=EyPiginXMr8kPPXC4sJ49FfxKBZwKreGUSCGB%2B0o1vQ%3D"
} else if(data == "oil-sample-history"){
link <- "https://xaptmladf.blob.core.windows.net/amldata/oil-sample-history-adf.tsv?st=2017-05-03T09%3A14%3A00Z&se=2027-05-04T09%3A14%3A00Z&sp=rl&sv=2015-12-11&sr=b&sig=P8hipBGjV7eFRJDT4L8jHLT6EHLzd6LFWYwLC7egxMs%3D"
} else if(data == "engine-start-stop-history"){
link <- "https://xaptmladf.blob.core.windows.net/amldata/engine-start-stop-history-adf.tsv?st=2017-05-03T09%3A14%3A00Z&se=2027-05-04T09%3A14%3A00Z&sp=rl&sv=2015-12-11&sr=b&sig=GyEkutN0QNjZf2FNT0C4dprl687%2FzKQMfeCYXo60xiA%3D"
}
dataset <- read.delim(url(link), header = TRUE, sep = '\t', stringsAsFactors = FALSE, quote = "")
time2 <- Sys.time()
cat("Reading", data,  "finished with:", "\n")
print(time2 - time1)
cat("\n")
return(dataset)
}
### ----
sh <- read.historical("history")
expect_that(3,1)
??expect_that
install.packages("testthat")
library(testthat)
expect_that(3,1)
expect_that(3*2,1*2)
expect_that(3*2,equals(2))
expect_that(3*2,equals(6))
install_github("Solymi90/Fars.Assignment")
library(devtools)
install_github("Solymi90/Fars.Assignment")
if(!require("devtools")) install.packages("devtools")
devtools::install_github("Microsoft/AzureSMR")
library(AzureSMR)
install.packages("ggmap")
library(ggmap)
inauguration_route <- route(from = "US Capitol Building",
to = "White House",
structure = "route",
mode = "walking")
inaug_route_map <- get_map("Metro Center, Washington DC",
zoom = 14) %>%
ggmap(extent = "device") +
geom_path(data = inauguration_route,
color = "darkred", size = 1.1)
library(dplyr)
inauguration_route <- route(from = "US Capitol Building",
to = "White House",
structure = "route",
mode = "walking")
inaug_route_map <- get_map("Metro Center, Washington DC",
zoom = 14) %>%
ggmap(extent = "device") +
geom_path(data = inauguration_route,
color = "darkred", size = 1.1)
inaug_route_map <- get_map("Metro Center, Washington DC",
zoom = 14)
ggmap(extent = "device") +
geom_path(data = inauguration_route,
color = "darkred", size = 1.1)
inaug_route_map <- get_map("Metro Center, Washington DC",
zoom = 14) %>%
ggmap(extent = "device") +
geom_path(data = inauguration_route,
color = "darkred", size = 1.1)
install.packages("ggproto")
dc_hotels <- data_frame(address =
c("1401 Pennsylvania Ave NW, Washington DC",
"1331 Pennsylvania Ave NW, Washington DC")) %>%
bind_cols(geocode(dc_hotels$address))
dc_hotels
library(dplyr)
dc_hotels <- data_frame(address =
c("1401 Pennsylvania Ave NW, Washington DC",
"1331 Pennsylvania Ave NW, Washington DC")) %>%
bind_cols(geocode(dc_hotels$address))
library(dplyr)
dc_hotels <- data_frame(address =
c("1401 Pennsylvania Ave NW, Washington DC",
"1331 Pennsylvania Ave NW, Washington DC"))
dc_hotels <- data_frame(address =
c("1401 Pennsylvania Ave NW, Washington DC",
"1331 Pennsylvania Ave NW, Washington DC")) %>%
bind_cols(geocode(dc_hotels$address))
dc_hotels
inauguration_route +
geom_point(data = dc_hotels, aes(x = lon, y = lat))
inaug_route_map +
geom_point(dc_hotels, aes(x = lon, y = lat))
inaug_route_map +
geom_point(data = dc_hotels, aes(x = lon, y = lat))
inaug_route_map +
geom_point(aes(x = lon, y = lat))
inaug_route_map +
geom_point(dc_hotels, aes(x = lon, y = lat))
inaug_route_map +
geom_point(data = dc_hotels, aes(x = lon, y = lat))
inaug_route_map +
geom_point(aes(x = lon, y = lat))
inauguration_route +
geom_point(data = dc_hotels, aes(x = lon, y = lat))
get_map("Washington, DC")
library(dplyr)
library(readr)
library(ggplot2)
library(ggmap)
storm_observation <- data_frame(longitude = c(-89.6, -89.6, -89.6),
latitude = c(29.5, 29.5, 29.5),
wind_speed = c("34", "50", "64"),
ne = c(200, 120, 90),
nw = c(100, 75, 60),
se = c(200, 120, 90),
sw = c(150, 75, 60))
GeomHurricane <- ggproto("GeomPolygon", Geom,
required_aes = c("x", "y", "r_ne", "r_se", "r_nw", "r_sw",
"fill", "colour"),
default_aes = aes(scale_radii = 0.8, alpha = 0.8, linetype = 1, size = 0.5),
draw_key = draw_key_polygon,
draw_group = function(data, panel_scales, coord) {
## Create function for conditional mutation
mutate_cond <- function(.data, condition, ..., envir = parent.frame()) {
condition <- eval(substitute(condition), .data, envir)
.data[condition, ] <- .data[condition, ] %>% mutate(...)
.data
}
## Create df of bearings for later joining
bearingDF <- tibble::data_frame(bearing = c(360,1:90,90:180,180:270,270:360),
direction = rep(c("r_ne", "r_se", "r_sw", "r_nw"),
each = 91)) %>%
dplyr::bind_rows(tibble::data_frame(bearing = rep(0, 4),
direction = c("r_ne", "r_se", "r_sw", "r_nw")))
## Transform data in tidy format and combine with bearings
data <- data %>%
dplyr::select(x, y, r_ne, r_nw, r_se, r_sw, colour, fill,
PANEL, group, scale_radii, alpha, linetype,
size) %>%
tidyr::gather(direction, distance, -x, -y, -colour, -fill,
-PANEL, -group, -scale_radii, -alpha, -linetype,
-size) %>%
dplyr::mutate(distance = distance * 1852 * scale_radii) %>%
dplyr::left_join(bearingDF, by = "direction") %>%
mutate_cond(bearing == 0, distance = 0)
## Generate correct lat/lon for perimeter of polygons
data <- data %>%
dplyr::bind_cols(as.data.frame(geosphere::destPoint(as.matrix(data[,1:2]),
data$bearing,
data$distance))) %>%
dplyr::select(-x, -y) %>%
dplyr::rename(x = lon, y = lat)
## Coord transform and take first row
coords <- coord$transform(data, panel_scales)
first_row <- coords[1, , drop = FALSE]
grid::polygonGrob(
coords$x, coords$y,
default.units = "native",
gp = grid::gpar(
col = first_row$colour,
fill = scales::alpha(first_row$fill, first_row$alpha),
lwd = first_row$size * .pt,
lty = first_row$linetype
)
)
})
geom_hurricane <- function(mapping = NULL, data = NULL, stat = "identity", position = "identity",
na.rm = FALSE, show.legend = NA, inherit.aes = TRUE, ...) {
layer(geom = GeomHurricane, mapping = mapping, data = data, stat = stat,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...))}
get_map("Louisiana", zoom = 6, maptype = "toner-background", source = "stamen") %>%
ggmap(extent = "device") +
geom_hurricane(data = storm_observation,
aes(x = longitude, y = latitude,
r_ne = ne, r_se = se, r_nw = nw, r_sw = sw,
fill = wind_speed, color = wind_speed)) +
scale_color_manual(name = "Wind speed (kts)",
values = c("red", "orange", "yellow")) +
scale_fill_manual(name = "Wind speed (kts)",
values = c("red", "orange", "yellow"))
get_map("Louisiana", zoom = 6, maptype = "toner-background", source = "stamen") %>%
ggmap(extent = "device")
get_map("Louisiana", zoom = 6, maptype = "toner-background") %>%
ggmap(extent = "device") +
geom_hurricane(data = storm_observation,
aes(x = longitude, y = latitude,
r_ne = ne, r_se = se, r_nw = nw, r_sw = sw,
fill = wind_speed, color = wind_speed)) +
scale_color_manual(name = "Wind speed (kts)",
values = c("red", "orange", "yellow")) +
scale_fill_manual(name = "Wind speed (kts)",
values = c("red", "orange", "yellow"))
get_map("Louisiana", zoom = 6, maptype = "toner-background") %>%
ggmap(extent = "device")
devtools::install_github("hadley/ggplot2@v2.2.0")
library(devtools)
library(roxygen2)
create("r-prog-capstone")
create("r_prog_capstone")
create("r.prog.capstone")
setwd("~/Coursera/Capstone Project")
create("r.prog.capstone")
setwd("/r.prog.capstone")
setwd("./r.prog.capstone")
use_vignette("capstone_details")
?strsplit
?substring
document()
document()
context("Test functions in the package")
library(testthat)
context("Test functions in the package")
file_name <- system.file("extdata/data.gz", package = "r.prog.capstone")
data <- readr::read_delim(file_name, delim = "\t")
test_that("eq_clean_data returns a data.frame object", {
expect_is(eq_clean_data(data), "data.frame")
})
document()
test_that("eq_clean_data returns a data.frame object", {
expect_is(eq_clean_data(data), "data.frame")
})
file_name <- system.file("extdata/data.gz", package = "r.prog.capstone")
data <- readr::read_delim(file_name, delim = "\t")
test_that("eq_clean_data returns a data.frame object", {
expect_is(eq_clean_data(data), "data.frame")
})
eq_clean_data <- function(raw_data){
clean_data <- eq_location_clean(raw_data)
dates <- apply(clean_data, 1,
function(row) ifelse(as.numeric(row["YEAR"]) < 0,
as.Date(paste(abs(as.numeric(row["YEAR"])),
ifelse(is.na(row["MONTH"]),"01", row["MONTH"]),
ifelse(is.na(row["DAY"]), "01", row["DAY"]), sep = "-")) - lubridate::years(abs(as.numeric(row["YEAR"]))*2),
as.Date(paste(row["YEAR"],
ifelse(is.na(row["MONTH"]),"01", row["MONTH"]),
ifelse(is.na(row["DAY"]), "01", row["DAY"]), sep = "-"))))
clean_data$DATE <- as.Date(dates,format = "%Y-%m-%d", origin = "1970-01-01", tz = "GMT")
return(clean_data)
}
test_that("eq_clean_data returns a data.frame object", {
expect_is(eq_clean_data(data), "data.frame")
})
test_that("eq_clean_data$DATE is Date type", {
expect_is(eq_clean_data(data)$DATE, "Date")
})
test_that("eq_clean_data returns numeric coordinates", {
expect_is(eq_clean_data(data)$LATITUDE, "numeric")
expect_is(eq_clean_data(data)$LONGITUDE, "numeric")
})
test_that("eq_location_clean returns a 'data.frame' object", {
expect_is(eq_location_clean(raw_data), "data.frame")
})
raw_data <- readr::read_delim(file_name, delim = "\t")
file_name <- system.file("extdata/data.gz", package = "r.prog.capstone")
raw_data <- readr::read_delim(file_name, delim = "\t")
test_that("eq_clean_data returns a 'data.frame' object", {
expect_is(eq_clean_data(raw_data), "data.frame")
})
test_that("eq_clean_data$DATE is of 'Date' type", {
expect_is(eq_clean_data(raw_data)$DATE, "Date")
})
test_that("eq_clean_data returns numeric coordinates", {
expect_is(eq_clean_data(raw_data)$LATITUDE, "numeric")
expect_is(eq_clean_data(raw_data)$LONGITUDE, "numeric")
})
clean <- eq_clean_data(raw_data)
eq_clean_data <- function(raw_data){
clean_data <- eq_location_clean(raw_data)
dates <- apply(clean_data, 1,
function(row) ifelse(as.numeric(row["YEAR"]) < 0,
as.Date(paste(abs(as.numeric(row["YEAR"])),
ifelse(is.na(row["MONTH"]),"01", row["MONTH"]),
ifelse(is.na(row["DAY"]), "01", row["DAY"]), sep = "-")) - lubridate::years(abs(as.numeric(row["YEAR"]))*2),
as.Date(paste(row["YEAR"],
ifelse(is.na(row["MONTH"]),"01", row["MONTH"]),
ifelse(is.na(row["DAY"]), "01", row["DAY"]), sep = "-"))))
clean_data <- clean_data %>%
mutate(DATE = as.Date(dates,format = "%Y-%m-%d", origin = "1970-01-01", tz = "GMT"),
LATITUDE = as.numeric(LATITUDE),
LONGITUDE = as.numeric(LONGITUDE))
return(clean_data)
}
clean <- eq_clean_data(raw_data)
eq_clean_data <- function(raw_data){
clean_data <- eq_location_clean(raw_data)
dates <- apply(clean_data, 1,
function(row) ifelse(as.numeric(row["YEAR"]) < 0,
as.Date(paste(abs(as.numeric(row["YEAR"])),
ifelse(is.na(row["MONTH"]),"01", row["MONTH"]),
ifelse(is.na(row["DAY"]), "01", row["DAY"]), sep = "-")) - lubridate::years(abs(as.numeric(row["YEAR"]))*2),
as.Date(paste(row["YEAR"],
ifelse(is.na(row["MONTH"]),"01", row["MONTH"]),
ifelse(is.na(row["DAY"]), "01", row["DAY"]), sep = "-"))))
clean_data <- clean_data %>%
dplyr::mutate(DATE = as.Date(dates,format = "%Y-%m-%d", origin = "1970-01-01", tz = "GMT"),
LATITUDE = as.numeric(LATITUDE),
LONGITUDE = as.numeric(LONGITUDE))
return(clean_data)
}
clean <- eq_clean_data(raw_data)
expect_is(eq_clean_data(raw_data)$LATITUDE, "numeric")
test_that("eq_clean_data returns numeric coordinates", {
expect_is(eq_clean_data(raw_data)$LATITUDE, "numeric")
expect_is(eq_clean_data(raw_data)$LONGITUDE, "numeric")
})
test_that("eq_location_clean returns a 'data.frame' object", {
expect_is(eq_location_clean(raw_data), "data.frame")
})
test_that("geom_timeline returns ggplot object", {
g <- data %>% eq_clean_data() %>%
dplyr::filter(COUNTRY %in% c("GREECE", "ITALY"), YEAR > 2000) %>%
ggplot2::ggplot(ggplot2::aes(x = DATE,
y = COUNTRY,
color = as.numeric(TOTAL_DEATHS),
size = as.numeric(EQ_PRIMARY)
)) +
geom_timeline()
expect_is(g, "ggplot")
})
test_that("geom_timeline_label returns a 'ggplot' object", {
g <- data %>% eq_clean_data() %>%
dplyr::filter(COUNTRY %in% c("GREECE", "ITALY"), YEAR > 2000) %>%
ggplot2::ggplot(ggplot2::aes(x = DATE,
y = COUNTRY,
color = as.numeric(TOTAL_DEATHS),
size = as.numeric(EQ_PRIMARY)
)) +
geom_timeline_label(aes(label = LOCATION_NAME))
expect_is(g, "ggplot")
})
test_that("geom_timeline_label returns a 'ggplot' object", {
g <- data %>% eq_clean_data() %>%
dplyr::filter(COUNTRY %in% c("GREECE", "ITALY"), YEAR > 2000) %>%
ggplot2::ggplot(ggplot2::aes(x = DATE,
y = COUNTRY,
color = as.numeric(TOTAL_DEATHS),
size = as.numeric(EQ_PRIMARY)
)) +
geom_timeline_label(aes(label = LOCATION_NAME))
expect_is(g, "ggplot")
})
file_name <- system.file("extdata/data.gz", package = "r.prog.capstone")
raw_data <- readr::read_delim(file_name, delim = "\t")
test_that("geom_timeline returns a 'ggplot' object", {
g <- data %>% eq_clean_data() %>%
dplyr::filter(COUNTRY %in% c("GREECE", "ITALY"), YEAR > 2000) %>%
ggplot2::ggplot(ggplot2::aes(x = DATE,
y = COUNTRY,
color = as.numeric(TOTAL_DEATHS),
size = as.numeric(EQ_PRIMARY)
)) +
geom_timeline()
expect_is(g, "ggplot")
})
test_that("geom_timeline_label returns a 'ggplot' object", {
g <- data %>% eq_clean_data() %>%
dplyr::filter(COUNTRY %in% c("GREECE", "ITALY"), YEAR > 2000) %>%
ggplot2::ggplot(ggplot2::aes(x = DATE,
y = COUNTRY,
color = as.numeric(TOTAL_DEATHS),
size = as.numeric(EQ_PRIMARY)
)) +
geom_timeline_label(aes(label = LOCATION_NAME))
expect_is(g, "ggplot")
})
document()
document()
test_that("geom_timeline_label returns a 'ggplot' object", {
g <- data %>% eq_clean_data() %>%
dplyr::filter(COUNTRY %in% c("GREECE", "ITALY"), YEAR > 2000) %>%
ggplot2::ggplot(ggplot2::aes(x = DATE,
y = COUNTRY,
color = as.numeric(TOTAL_DEATHS),
size = as.numeric(EQ_PRIMARY)
)) +
geom_timeline_label(aes(label = LOCATION_NAME))
expect_is(g, "ggplot")
})
test_that("geom_timeline_label returns a 'ggplot' object", {
g <- data %>% eq_clean_data() %>%
dplyr::filter(COUNTRY %in% c("GREECE", "ITALY"), YEAR > 2000) %>%
ggplot2::ggplot(ggplot2::aes(x = DATE,
y = COUNTRY,
color = as.numeric(TOTAL_DEATHS),
size = as.numeric(EQ_PRIMARY)
)) +
geom_timeline_label(aes(label = LOCATION_NAME))
expect_is(g, "ggplot")
})
document()
file_name <- system.file("extdata/data.gz", package = "r.prog.capstone")
raw_data <- readr::read_delim(file_name, delim = "\t")
test_that("geom_timeline_label returns a 'ggplot' object", {
g <- data %>% eq_clean_data() %>%
dplyr::filter(COUNTRY %in% c("GREECE", "ITALY"), YEAR > 2000) %>%
ggplot2::ggplot(ggplot2::aes(x = DATE,
y = COUNTRY,
color = as.numeric(TOTAL_DEATHS),
size = as.numeric(EQ_PRIMARY)
)) +
geom_timeline_label(aes(label = LOCATION_NAME))
expect_is(g, "ggplot")
})
?aes
test_that("geom_timeline_label returns a 'ggplot' object", {
g <- data %>% eq_clean_data() %>%
dplyr::filter(COUNTRY %in% c("GREECE", "ITALY"), YEAR > 2000) %>%
ggplot2::ggplot(ggplot2::aes(x = DATE,
y = COUNTRY,
color = as.numeric(TOTAL_DEATHS),
size = as.numeric(EQ_PRIMARY)
)) +
geom_timeline_label(ggplot2::aes(label = LOCATION_NAME))
expect_is(g, "ggplot")
})
test_that("theme_timeline returns ggplot object", {
g <- data %>% eq_clean_data() %>%
dplyr::filter(COUNTRY %in% c("GREECE", "ITALY"), YEAR > 2000) %>%
ggplot2::ggplot(ggplot2::aes(x = DATE,
y = COUNTRY,
color = as.numeric(TOTAL_DEATHS),
size = as.numeric(EQ_PRIMARY)
)) +
theme_timeline()
expect_is(g, "ggplot")
})
test_that("eq_map returns leaflet object", {
l <- data %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
expect_is(l, "leaflet")
})
install.packages("leaflet")
test_that("eq_map returns a 'leaflet' object", {
l <- data %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
expect_is(l, "leaflet")
})
test_that("eq_create_label returns character vector", {
expect_is(eq_create_label(data), "character")
})
test_that("eq_create_label has the same length as input data frame", {
expect_equal(length(eq_create_label(data)), dim(data)[1])
})
library(r.prog.capstone)
test_check("r.prog.capstone")
library(r.prog.capstone)
test_check("r.prog.capstone")
document()
library(r.prog.capstone)
test_check("r.prog.capstone")
library(ykvdpcap)
document()
use_vignette("capstone_details")
use_vignette("capstone_details")
library(r.prog.capstone)
test_check("r.prog.capstone")
test_check("r.prog.capstone")
library(r.prog.capstone)
install.packages("r.prog.capstone")
install.packages("r.prog.capstone")
library(r.prog.capstone)
setwd("~/Coursera/Capstone Project/r.prog.capstone")
library(r.prog.capstone)
test_check("r.prog.capstone")
library(testthat)
library(r.prog.capstone)
file_name <- system.file("extdata/data.gz", package = "r.prog.capstone")
raw_data <- readr::read_delim(file_name, delim = "\t")
library(devtools)
library(roxygen2)
setwd("./r.prog.capstone")
raw_data <- readr::read_delim(file_name, delim = "\t")
file_name <- system.file("extdata/data.gz", package = "r.prog.capstone")
raw_data <- readr::read_delim(file_name, delim = "\t")
setwd("~/Coursera/Capstone Project")
library(r.prog.capstone)
use_readme_rmd()
setwd("~/Coursera/Capstone Project/r.prog.capstone")
use_readme_rmd()
library(r.prog.capstone)
use_travis()
